#! /usr/bin/ruby

#--
###############################################################################
#                                                                             #
# guess_encoding -- Assist with guessing the encoding of some input at hand   #
#   [A component of cmess, the encoding tool-box]                             #
#                                                                             #
# Copyright (C) 2007 University of Cologne,                                   #
#                    Albertus-Magnus-Platz,                                   #
#                    50932 Cologne, Germany                                   #
#                                                                             #
# Authors:                                                                    #
#     Jens Wille <jens.wille@uni-koeln.de>                                    #
#                                                                             #
# cmess is free software; you can redistribute it and/or modify it under the  #
# terms of the GNU General Public License as published by the Free Software   #
# Foundation; either version 3 of the License, or (at your option) any later  #
# version.                                                                    #
#                                                                             #
# cmess is distributed in the hope that it will be useful, but WITHOUT ANY    #
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   #
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       #
# details.                                                                    #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with cmess. If not, see <http://www.gnu.org/licenses/>.                     #
#                                                                             #
###############################################################################
#++

require 'optparse'

require 'rubygems'
require 'nuggets/string/word_wrap'

$: << File.join(File.dirname(__FILE__), '..', 'lib')

require 'cmess'
require 'cmess/guess_encoding'
require 'cmess/cli'

include CMess::CLI

PROGNAME = File.basename($0)

# how to split list of encodings
SPLIT_ENCODING_LIST_RE = /\s*[,\s]\s*/o

options = {
  :input                => STDIN,
  :line                 => 1,
  :encodings            => nil,
  :additional_encodings => [],
  :target_encoding      => determine_system_encoding
}

OptionParser.new(nil, 40) { |opts|
  opts.banner = "Usage: #{$0} [options]"

  opts.separator ''
  opts.separator 'Options:'

  opts.on('-i', '--input FILE', "Input file to read from [Default: STDIN]") { |f|
    options[:input] = open_file_or_std(f)
  }

  opts.on('-l', '--line LINE', "Line number of input file to use for testing [Default: #{options[:line]}]") { |l|
    options[:line] = l.to_i

    unless options[:line] > 0
      options[:input].read  # prevent 'Broken pipe' error
      abort "Line number must be greater then 0!"
    end
  }

  opts.separator ''

  opts.on('-e', '--encodings ENCODINGS...', "List of encodings to try >instead of< default (see below)") { |e|
    options[:encodings] ||= []
    options[:encodings] += e.split(SPLIT_ENCODING_LIST_RE)
  }

  opts.on('-a', '--additional-encodings ENCODINGS...', "List of encodings to try >in addition to< default (see below)") { |e|
    options[:additional_encodings] += e.split(SPLIT_ENCODING_LIST_RE)
  }

  opts.separator ''

  opts.on('-t', '--target-encoding ENCODING', "Target encoding of your system [Default: #{options[:target_encoding]}]") { |e|
    options[:target_encoding] = e
  }

  opts.separator ''
  opts.separator 'Generic options:'

  opts.on('-h', '--help', "Print this help message and exit") {
    puts opts
    exit
  }

  opts.on('--version', "Print program version and exit") {
    puts "#{PROGNAME} v#{CMess::GuessEncoding::VERSION} (part of cmess v#{CMess::VERSION})"
    exit
  }

  opts.separator ''
  opts.separator 'Default encodings:'
  CMess::GuessEncoding::ENCODINGS.join(', ').word_wrap(110, true).each { |l|
    opts.separator l
  }

  opts.separator ''
  opts.separator 'Likely candidates for additional testing:'
  CMess::GuessEncoding::CANDIDATES.join(', ').word_wrap(110, true).each { |l|
    opts.separator l
  }

  opts.separator ''
  opts.separator "When FILE is -, STDIN is used."
}.parse!

options[:target_encoding].call if options[:target_encoding].respond_to?(:call)

# reset line counter
$. = 0

input = options[:input].each { |line|
  break line if $. == options[:line]
}
abort "Input was empty!" if $..zero?
abort "Line not found -- input has only #{$.} line#{'s' if $. != 1}" unless input.is_a?(String)

CMess::GuessEncoding.display(
  input,
  options[:target_encoding],
  options[:encodings],
  options[:additional_encodings]
)
